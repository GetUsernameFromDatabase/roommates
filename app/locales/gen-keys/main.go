//go:generate go run main.go

package main

import (
	"bytes"
	"flag"
	"fmt"
	"log"
	"os"
	"regexp"
	"sort"
	"strings"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"gopkg.in/yaml.v3"
)

// command flag arguments
var (
	inputPath   = flag.String("in", "../et/et.yaml", "Path to input YAML file")
	outputPath  = flag.String("out", "../locales-keys.go", "Path to output Go file")
	packageName = flag.String("pkg", "locales", "Package name for the generated file")
	enumPrefix  = flag.String("pfx", "LK", "Prefix for the locale enum also used as enum type")
)

var (
	// used to capitalize variable names
	caser = cases.Title(language.BritishEnglish)
	// used to sanitize yaml key path for use as golang variable names
	rgxVarSanitizer = regexp.MustCompile("[-_]")
)

func main() {
	flag.Parse()

	data, err := os.ReadFile(*inputPath)
	if err != nil {
		log.Fatalf("Failed to read input file: %v", err)
	}

	var parsed map[string]any
	if err := yaml.Unmarshal(data, &parsed); err != nil {
		log.Fatalf("Failed to parse YAML: %v", err)
	}

	entries := make(map[string]string)
	for _, node := range parsed {
		// ignoring top level -- usually the language code like "et"
		flattenYAML(node, "", []string{}, entries)
	}
	// this to have output more consistent -- do not want git commit when nothing has changed
	entryKeys := make([]string, 0, len(entries))
	for k := range entries {
		entryKeys = append(entryKeys, k)
	}
	sort.Strings(entryKeys)

	var buf bytes.Buffer
	buf.WriteString("// Code generated by gen-keys - DO NOT EDIT.\n\n")
	buf.WriteString(fmt.Sprintf("package %s\n\n", *packageName))

	// write types
	buf.WriteString("// Used to index i18n values\n")
	buf.WriteString(fmt.Sprintf("type %s string\n\n", *enumPrefix))
	buf.WriteString("// Used to pipe key and arguments into ctxi18n\n")
	buf.WriteString(fmt.Sprintf("type %sMessage struct {\n", *enumPrefix))
	buf.WriteString(fmt.Sprintf("	Key  %s\n", *enumPrefix))
	buf.WriteString("	Args []any\n")
	buf.WriteString("}\n\n")

	// write constants
	buf.WriteString("const (\n")
	for _, key := range entryKeys {
		value := entries[key]
		buf.WriteString(fmt.Sprintf("\t%s %s = \"%s\"\n", key, *enumPrefix, value))
	}
	buf.WriteString(")\n")

	if err := os.WriteFile(*outputPath, buf.Bytes(), 0644); err != nil {
		log.Fatalf("Failed to write output file: %v", err)
	}
}

// flattenYAML recursively flattens nested maps into dot-separated keys
func flattenYAML(node any, prefix string, path []string, out map[string]string) {
	switch v := node.(type) {
	case map[string]any:
		for key, value := range v {
			flattenYAML(value, prefix, append(path, key), out)
		}
	default:
		if prefix != "" {
			path = append([]string{prefix}, path...)
		}

		enumName := *enumPrefix + pathToVariableName(path)
		fullPath := strings.Join(path, ".")
		out[enumName] = fullPath
	}
}

func pathToVariableName(path []string) string {
	var b strings.Builder
	for _, part := range path {
		str := caser.String(part)
		str = rgxVarSanitizer.ReplaceAllString(str, "")
		b.WriteString(str)
	}
	return b.String()
}
