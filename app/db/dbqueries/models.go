// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package dbqueries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ConversationRecipientType string

const (
	ConversationRecipientTypeHouse  ConversationRecipientType = "house"
	ConversationRecipientTypeDirect ConversationRecipientType = "direct"
	ConversationRecipientTypeGroup  ConversationRecipientType = "group"
)

func (e *ConversationRecipientType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ConversationRecipientType(s)
	case string:
		*e = ConversationRecipientType(s)
	default:
		return fmt.Errorf("unsupported scan type for ConversationRecipientType: %T", src)
	}
	return nil
}

type NullConversationRecipientType struct {
	ConversationRecipientType ConversationRecipientType `json:"conversation_recipient_type"`
	Valid                     bool                      `json:"valid"` // Valid is true if ConversationRecipientType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullConversationRecipientType) Scan(value interface{}) error {
	if value == nil {
		ns.ConversationRecipientType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ConversationRecipientType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullConversationRecipientType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ConversationRecipientType), nil
}

func (e ConversationRecipientType) Valid() bool {
	switch e {
	case ConversationRecipientTypeHouse,
		ConversationRecipientTypeDirect,
		ConversationRecipientTypeGroup:
		return true
	}
	return false
}

type HousePaymentStatus string

const (
	HousePaymentStatusDone       HousePaymentStatus = "done"
	HousePaymentStatusIncomplete HousePaymentStatus = "incomplete"
)

func (e *HousePaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = HousePaymentStatus(s)
	case string:
		*e = HousePaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for HousePaymentStatus: %T", src)
	}
	return nil
}

type NullHousePaymentStatus struct {
	HousePaymentStatus HousePaymentStatus `json:"house_payment_status"`
	Valid              bool               `json:"valid"` // Valid is true if HousePaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullHousePaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.HousePaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.HousePaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullHousePaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.HousePaymentStatus), nil
}

func (e HousePaymentStatus) Valid() bool {
	switch e {
	case HousePaymentStatusDone,
		HousePaymentStatusIncomplete:
		return true
	}
	return false
}

type HouseReminderStatus string

const (
	HouseReminderStatusCanceled   HouseReminderStatus = "canceled"
	HouseReminderStatusInProgress HouseReminderStatus = "in-progress"
	HouseReminderStatusComplete   HouseReminderStatus = "complete"
)

func (e *HouseReminderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = HouseReminderStatus(s)
	case string:
		*e = HouseReminderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for HouseReminderStatus: %T", src)
	}
	return nil
}

type NullHouseReminderStatus struct {
	HouseReminderStatus HouseReminderStatus `json:"house_reminder_status"`
	Valid               bool                `json:"valid"` // Valid is true if HouseReminderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullHouseReminderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.HouseReminderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.HouseReminderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullHouseReminderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.HouseReminderStatus), nil
}

func (e HouseReminderStatus) Valid() bool {
	switch e {
	case HouseReminderStatusCanceled,
		HouseReminderStatusInProgress,
		HouseReminderStatusComplete:
		return true
	}
	return false
}

type Conversation struct {
	ID                pgtype.UUID               `json:"id"`
	Name              *string                   `json:"name"`
	ConversationImage []byte                    `json:"conversation_image"`
	RecipientIds      []string                  `json:"recipient_ids"`
	RecipientType     ConversationRecipientType `json:"recipient_type"`
}

type House struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

type HouseNote struct {
	ID        int32              `json:"id"`
	Content   string             `json:"content"`
	HouseID   pgtype.UUID        `json:"house_id"`
	MakerID   pgtype.UUID        `json:"maker_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type HousePayment struct {
	ID          pgtype.UUID        `json:"id"`
	PaymentName string             `json:"payment_name"`
	Amount      pgtype.Numeric     `json:"amount"`
	RequesterID pgtype.UUID        `json:"requester_id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type HousePaymentPayer struct {
	PaymentID     pgtype.UUID        `json:"payment_id"`
	PayerID       pgtype.UUID        `json:"payer_id"`
	PaymentStatus HousePaymentStatus `json:"payment_status"`
}

type HousePaymentsFile struct {
	PaymentID pgtype.UUID        `json:"payment_id"`
	FileName  string             `json:"file_name"`
	FileData  []byte             `json:"file_data"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type HouseReminder struct {
	ID             int32               `json:"id"`
	Content        []byte              `json:"content"`
	ReminderStatus HouseReminderStatus `json:"reminder_status"`
	HouseID        pgtype.UUID         `json:"house_id"`
	MakerID        pgtype.UUID         `json:"maker_id"`
	CreatedAt      pgtype.Timestamptz  `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz  `json:"updated_at"`
}

type Message struct {
	ID             pgtype.UUID        `json:"id"`
	Content        string             `json:"content"`
	ConversationID pgtype.UUID        `json:"conversation_id"`
	SenderID       pgtype.UUID        `json:"sender_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

type User struct {
	ID             pgtype.UUID `json:"id"`
	Email          string      `json:"email"`
	Username       string      `json:"username"`
	Password       string      `json:"password"`
	EmailValidated bool        `json:"email_validated"`
}

type UserContactInformation struct {
	UserID             pgtype.UUID `json:"user_id"`
	ContactInformation []byte      `json:"contact_information"`
}

type UserHouse struct {
	UserID  pgtype.UUID `json:"user_id"`
	HouseID pgtype.UUID `json:"house_id"`
}
