// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package dbqueries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserCredentials = `-- name: GetUserCredentials :one
SELECT id,
  email,
  username,
  password
FROM users
WHERE email = $1
`

type GetUserCredentialsRow struct {
	ID       pgtype.UUID `json:"id"`
	Email    string      `json:"email"`
	Username string      `json:"username"`
	Password string      `json:"password"`
}

// This file uses SQLC -- https://docs.sqlc.dev/en/latest/tutorials/getting-started-postgresql.html#schema-and-queries
func (q *Queries) GetUserCredentials(ctx context.Context, email string) (GetUserCredentialsRow, error) {
	row := q.db.QueryRow(ctx, getUserCredentials, email)
	var i GetUserCredentialsRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (email, username, password)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertUserParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Email, arg.Username, arg.Password)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
