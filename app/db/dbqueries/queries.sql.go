// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package dbqueries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteHouse = `-- name: DeleteHouse :exec
DELETE FROM houses
WHERE id = $1
`

func (q *Queries) DeleteHouse(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteHouse, id)
	return err
}

const deleteHouseUsers = `-- name: DeleteHouseUsers :exec
DELETE FROM user_houses
WHERE house_id = $1
`

func (q *Queries) DeleteHouseUsers(ctx context.Context, houseID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteHouseUsers, houseID)
	return err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM house_notes
WHERE id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteNote, id)
	return err
}

const getUserCredentials = `-- name: GetUserCredentials :one
SELECT id,
  email,
  username,
  password
FROM users
WHERE email = $1
`

type GetUserCredentialsRow struct {
	ID       pgtype.UUID `json:"id"`
	Email    string      `json:"email"`
	Username string      `json:"username"`
	Password string      `json:"password"`
}

// This file uses SQLC -- https://docs.sqlc.dev/en/latest/tutorials/getting-started-postgresql.html#schema-and-queries
// useful links
// - annotations (like :one): https://docs.sqlc.dev/en/latest/reference/query-annotations.html#many
// - named parameters: https://docs.sqlc.dev/en/latest/howto/named_parameters.html
func (q *Queries) GetUserCredentials(ctx context.Context, email string) (GetUserCredentialsRow, error) {
	row := q.db.QueryRow(ctx, getUserCredentials, email)
	var i GetUserCredentialsRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const insertHouse = `-- name: InsertHouse :one
INSERT INTO houses (name, maker_id)
VALUES ($1, $2)
RETURNING id
`

type InsertHouseParams struct {
	Name    string      `json:"name"`
	MakerID pgtype.UUID `json:"maker_id"`
}

func (q *Queries) InsertHouse(ctx context.Context, arg InsertHouseParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertHouse, arg.Name, arg.MakerID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const insertNote = `-- name: InsertNote :one
INSERT INTO house_notes (title, content, house_id, maker_id)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type InsertNoteParams struct {
	Title   string      `json:"title"`
	Content string      `json:"content"`
	HouseID pgtype.UUID `json:"house_id"`
	MakerID pgtype.UUID `json:"maker_id"`
}

func (q *Queries) InsertNote(ctx context.Context, arg InsertNoteParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertNote,
		arg.Title,
		arg.Content,
		arg.HouseID,
		arg.MakerID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
    email,
    username,
    password,
    full_name,
    is_full_name_public
  )
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type InsertUserParams struct {
	Email            string  `json:"email"`
	Username         string  `json:"username"`
	Password         string  `json:"password"`
	FullName         *string `json:"full_name"`
	IsFullNamePublic bool    `json:"is_full_name_public"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.FullName,
		arg.IsFullNamePublic,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const insertUserIntoHouse = `-- name: InsertUserIntoHouse :exec
INSERT INTO user_houses (user_id, house_id)
VALUES ($1, $2) ON CONFLICT DO NOTHING
`

type InsertUserIntoHouseParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	HouseID pgtype.UUID `json:"house_id"`
}

func (q *Queries) InsertUserIntoHouse(ctx context.Context, arg InsertUserIntoHouseParams) error {
	_, err := q.db.Exec(ctx, insertUserIntoHouse, arg.UserID, arg.HouseID)
	return err
}

const isUserHouseMaker = `-- name: IsUserHouseMaker :one
SELECT EXISTS (
    SELECT 1
    FROM houses
    WHERE id = $1
      AND maker_id = $2
  )
`

type IsUserHouseMakerParams struct {
	HouseID pgtype.UUID `json:"house_id"`
	UserID  pgtype.UUID `json:"user_id"`
}

func (q *Queries) IsUserHouseMaker(ctx context.Context, arg IsUserHouseMakerParams) (bool, error) {
	row := q.db.QueryRow(ctx, isUserHouseMaker, arg.HouseID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isUserNoteMaker = `-- name: IsUserNoteMaker :one
SELECT EXISTS (
    SELECT 1
    FROM house_notes
    WHERE id = $1
      AND maker_id = $2
  )
`

type IsUserNoteMakerParams struct {
	NoteID int32       `json:"note_id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) IsUserNoteMaker(ctx context.Context, arg IsUserNoteMakerParams) (bool, error) {
	row := q.db.QueryRow(ctx, isUserNoteMaker, arg.NoteID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const selectHouse = `-- name: SelectHouse :one
SELECT id, name, maker_id, created_at, updated_at
FROM houses
WHERE id = $1
`

func (q *Queries) SelectHouse(ctx context.Context, id pgtype.UUID) (House, error) {
	row := q.db.QueryRow(ctx, selectHouse, id)
	var i House
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MakerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectHouseRoommates = `-- name: SelectHouseRoommates :many
SELECT u.id,
  u.username
FROM users u
WHERE u.id IN (
    SELECT user_id
    FROM user_houses
    WHERE house_id = $1
  )
ORDER BY u.username
`

type SelectHouseRoommatesRow struct {
	ID       pgtype.UUID `json:"id"`
	Username string      `json:"username"`
}

func (q *Queries) SelectHouseRoommates(ctx context.Context, houseID pgtype.UUID) ([]SelectHouseRoommatesRow, error) {
	rows, err := q.db.Query(ctx, selectHouseRoommates, houseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectHouseRoommatesRow
	for rows.Next() {
		var i SelectHouseRoommatesRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectNote = `-- name: SelectNote :one
SELECT hn.id note_id,
  hn.title,
  hn.content,
  hn.maker_id,
  h.id house_id,
  h.name house_name
FROM house_notes hn
  INNER JOIN houses h ON hn.house_id = h.id
WHERE hn.id = $1
ORDER BY hn.updated_at
`

type SelectNoteRow struct {
	NoteID    int32       `json:"note_id"`
	Title     string      `json:"title"`
	Content   string      `json:"content"`
	MakerID   pgtype.UUID `json:"maker_id"`
	HouseID   pgtype.UUID `json:"house_id"`
	HouseName string      `json:"house_name"`
}

func (q *Queries) SelectNote(ctx context.Context, id int32) (SelectNoteRow, error) {
	row := q.db.QueryRow(ctx, selectNote, id)
	var i SelectNoteRow
	err := row.Scan(
		&i.NoteID,
		&i.Title,
		&i.Content,
		&i.MakerID,
		&i.HouseID,
		&i.HouseName,
	)
	return i, err
}

const selectUserHousesWithNotes = `-- name: SelectUserHousesWithNotes :many
SELECT h.id house_id,
  h.name house_name,
  COALESCE(
    ARRAY_AGG(hn.id) FILTER (
      WHERE hn.id IS NOT NULL
    ),
    '{}'
  )::int [] note_ids
FROM houses h
  LEFT JOIN house_notes hn ON h.id = hn.house_id
WHERE h.id IN (
    SELECT house_id
    FROM user_houses uh
    WHERE uh.user_id = $1
  )
GROUP BY h.id
ORDER BY h.name
`

type SelectUserHousesWithNotesRow struct {
	HouseID   pgtype.UUID `json:"house_id"`
	HouseName string      `json:"house_name"`
	NoteIds   []int32     `json:"note_ids"`
}

func (q *Queries) SelectUserHousesWithNotes(ctx context.Context, userID pgtype.UUID) ([]SelectUserHousesWithNotesRow, error) {
	rows, err := q.db.Query(ctx, selectUserHousesWithNotes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUserHousesWithNotesRow
	for rows.Next() {
		var i SelectUserHousesWithNotesRow
		if err := rows.Scan(&i.HouseID, &i.HouseName, &i.NoteIds); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHouse = `-- name: UpdateHouse :exec
UPDATE houses
SET name = $1
WHERE id = $2
`

type UpdateHouseParams struct {
	Name string      `json:"name"`
	ID   pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateHouse(ctx context.Context, arg UpdateHouseParams) error {
	_, err := q.db.Exec(ctx, updateHouse, arg.Name, arg.ID)
	return err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE house_notes
SET title = $2,
  content = $3
WHERE id = $1
`

type UpdateNoteParams struct {
	ID      int32  `json:"id"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.Exec(ctx, updateNote, arg.ID, arg.Title, arg.Content)
	return err
}

const userHouses = `-- name: UserHouses :many
SELECT h.id,
  h.name,
  h.maker_id
FROM houses h
WHERE h.id IN (
    SELECT house_id
    FROM user_houses uh
    WHERE uh.user_id = $1
  )
  OR h.maker_id = $1
ORDER BY h.name
`

type UserHousesRow struct {
	ID      pgtype.UUID `json:"id"`
	Name    string      `json:"name"`
	MakerID pgtype.UUID `json:"maker_id"`
}

func (q *Queries) UserHouses(ctx context.Context, userID pgtype.UUID) ([]UserHousesRow, error) {
	rows, err := q.db.Query(ctx, userHouses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserHousesRow
	for rows.Next() {
		var i UserHousesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.MakerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const usersLikeExcludingExisting = `-- name: UsersLikeExcludingExisting :many
SELECT id,
  username
FROM users
WHERE username ILIKE $1::text || '%'
  AND username NOT IN (
    SELECT UNNEST($2::text [])
  )
LIMIT 10
`

type UsersLikeExcludingExistingParams struct {
	Username      string   `json:"username"`
	ExistingUsers []string `json:"existing_users"`
}

type UsersLikeExcludingExistingRow struct {
	ID       pgtype.UUID `json:"id"`
	Username string      `json:"username"`
}

func (q *Queries) UsersLikeExcludingExisting(ctx context.Context, arg UsersLikeExcludingExistingParams) ([]UsersLikeExcludingExistingRow, error) {
	rows, err := q.db.Query(ctx, usersLikeExcludingExisting, arg.Username, arg.ExistingUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersLikeExcludingExistingRow
	for rows.Next() {
		var i UsersLikeExcludingExistingRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
