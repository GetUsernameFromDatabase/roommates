// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package dbqueries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserCredentials = `-- name: GetUserCredentials :one
SELECT id,
  email,
  username,
  password
FROM users
WHERE email = $1
LIMIT 1
`

type GetUserCredentialsRow struct {
	ID       pgtype.UUID `json:"id"`
	Email    string      `json:"email"`
	Username string      `json:"username"`
	Password string      `json:"password"`
}

// This file uses SQLC -- https://docs.sqlc.dev/en/latest/tutorials/getting-started-postgresql.html#schema-and-queries
// useful links
// - annotations (like :one): https://docs.sqlc.dev/en/latest/reference/query-annotations.html#many
// - named parameters: https://docs.sqlc.dev/en/latest/howto/named_parameters.html
func (q *Queries) GetUserCredentials(ctx context.Context, email string) (GetUserCredentialsRow, error) {
	row := q.db.QueryRow(ctx, getUserCredentials, email)
	var i GetUserCredentialsRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
    email,
    username,
    password,
    full_name,
    is_full_name_public
  )
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type InsertUserParams struct {
	Email            string  `json:"email"`
	Username         string  `json:"username"`
	Password         string  `json:"password"`
	FullName         *string `json:"full_name"`
	IsFullNamePublic bool    `json:"is_full_name_public"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.FullName,
		arg.IsFullNamePublic,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const userHouses = `-- name: UserHouses :many
SELECT h.id,
  h.name
FROM houses h
WHERE id IN (
    SELECT house_id
    FROM user_houses uh
    WHERE uh.user_id = $1
  )
`

func (q *Queries) UserHouses(ctx context.Context, userID pgtype.UUID) ([]House, error) {
	rows, err := q.db.Query(ctx, userHouses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []House
	for rows.Next() {
		var i House
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const usersLikeExcludingExisting = `-- name: UsersLikeExcludingExisting :many
SELECT id,
  username
FROM users
WHERE username ILIKE $1::text || '%'
  AND username NOT IN (SELECT UNNEST($2::text[]))
LIMIT 10
`

type UsersLikeExcludingExistingParams struct {
	Username      string   `json:"username"`
	ExistingUsers []string `json:"existing_users"`
}

type UsersLikeExcludingExistingRow struct {
	ID       pgtype.UUID `json:"id"`
	Username string      `json:"username"`
}

func (q *Queries) UsersLikeExcludingExisting(ctx context.Context, arg UsersLikeExcludingExistingParams) ([]UsersLikeExcludingExistingRow, error) {
	rows, err := q.db.Query(ctx, usersLikeExcludingExisting, arg.Username, arg.ExistingUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersLikeExcludingExistingRow
	for rows.Next() {
		var i UsersLikeExcludingExistingRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
