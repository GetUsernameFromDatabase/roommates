package components

import "roommates/locales"

import "strings"
import "roommates/globals"
import "roommates/models"
import "roommates/utils"

templ PageLogin(model models.Login) {
	@HtmlWrap() {
		@HeaderComponent("")
		<body class="bg-background font-geist-sans text-foreground antialiased">
			@togglePasswordVisibility()
			<div class="md:bg-muted flex min-h-svh items-center justify-center p-4 md:p-10">
				<div class="w-full max-w-md">
					<div class="uk-card uk-card-body fr-widget bg-background text-foreground border-border md:border md:p-6">
						<h1 class="uk-card-title uk-h4">{ utils.T(ctx, locales.LKLoginTitle, "Login") }</h1>
						@LoginForm(model)
						<div class="uk-divider-icon mt-6"></div>
						<div class="mt-6 text-center" hx-boost="true">
							{ utils.T(ctx, locales.LKLoginNoAccount, "Have no account?") }
							<a class="uk-link" href={ globals.RRegister }>
								{ utils.T(ctx, locales.LKLoginRegister, "Register account") }
							</a>
						</div>
					</div>
				</div>
			</div>
		</body>
	}
}

templ PageRegister(model models.Register) {
	@HtmlWrap() {
		@HeaderComponent("")
		<body class="bg-background font-geist-sans text-foreground antialiased">
			@togglePasswordVisibility()
			<div class="md:bg-muted flex min-h-svh items-center justify-center p-4 md:p-10">
				<div class="w-full max-w-md">
					<div class="uk-card uk-card-body fr-widget bg-background text-foreground border-border md:border md:p-6">
						<h1 class="uk-card-title uk-h4">{ utils.T(ctx, locales.LKRegisterTitle, "Register") }</h1>
						@RegisterForm(model)
						<div class="uk-divider-icon mt-6"></div>
						<div class="mt-6 text-center" hx-boost="true">
							{ utils.T(ctx, locales.LKRegisterAlreadyHaveAccount, "Already have account?") }
							<a class="uk-link" href={ globals.RLogin }>
								{ utils.T(ctx, locales.LKLoginTitle, "Login") }
							</a>
						</div>
					</div>
				</div>
			</div>
		</body>
	}
}

templ LoginForm(m models.Login) {
	{{
		emailErrors := m.ValidateEmail()
		passwordErrors := m.ValidatePassword()
	}}
	<form id="loginForm" method="post" hx-boost="true" class="uk-form-stacked space-y-6 mt-6">
		// @CSRF()
		@FormError(m.Error)
		@LfEmailInput(emailErrors, m.Email)
		@LfPasswordInput(passwordErrors, m.Password, "")
		<div class="mt-4">
			<button type="submit" class="uk-btn uk-btn-primary block w-full">
				{ strings.ToUpper(utils.T(ctx, locales.LKLoginTitle, "Login")) }
			</button>
		</div>
	</form>
}

templ RegisterForm(m models.Register) {
	{{
		emailErrors := m.ValidateEmail()
		usernameErrors := m.ValidateUsername()
		passwordErrors := m.ValidatePassword()
		password2Errors := m.ValidatePasswordMatch()
	}}
	<form id="registerForm" method="post" hx-boost="true" class="uk-form-stacked space-y-6 mt-6">
		// @CSRF()
		@FormError(m.Error)
		@InputWithLabel("email", "", "email",
			utils.T(ctx, locales.LKFormsEmailTitle, "E-Mail"),
			LabelClass("uk-form-label uk-form-label-required"),
			Icon("mail"),
			ValidationMessages(emailErrors),
			templ.Attributes{
				"autocomplete": "email",
				"value":        m.Email,
			},
		)
		@InputWithLabel("text", "", "username",
			utils.T(ctx, locales.LKFormsUsernameTitle, "Username"),
			LabelClass("uk-form-label uk-form-label-required"),
			Icon("user"),
			ValidationMessages(usernameErrors),
			templ.Attributes{
				"autocomplete": "name",
				"value":        m.Username,
			},
		)
		<div class="space-y-3">
			@InputWithLabel("text", "", "full_name",
				utils.T(ctx, locales.LKFormsFullNameTitle, "Full Name"),
				FormHelpBlock(utils.T(ctx, locales.LKFormsFullNameInfo, "")),
				Icon("user"),
				templ.Attributes{
					"placeholder": utils.T(ctx, locales.LKFormsFullNameTitle, ""),
					"value":       m.FullName,
				},
			)
			@ToggleSwitch("", "is_full_name_public", utils.T(ctx, locales.LKFormsFullNameMarkPublic, ""), m.IsFullNamePublic)
		</div>
		<div class="space-y-3">
			<label class="uk-form-label">
				{ utils.T(ctx, locales.LKFormsPasswordTitle, "Password") }
			</label>
			@LfPasswordInput(passwordErrors, m.Password, "")
			@LfPasswordInput(password2Errors, m.Password2, "password_2")
		</div>
		<div class="mt-4">
			<button type="submit" class="uk-btn uk-btn-primary block w-full">
				{ strings.ToUpper(utils.T(ctx, locales.LKRegisterTitle, "Register")) }
			</button>
		</div>
	</form>
}

templ LfEmailInput(errors []locales.LKMessage, value string) {
	<div>
		<div class="uk-inline w-full">
			<span class="uk-form-icon">
				<uk-icon icon="mail"></uk-icon>
			</span>
			<input
				class="uk-input"
				type="email"
				name="email"
				aria-label="Email Input"
				placeholder={ utils.T(ctx, locales.LKFormsEmailTitle, "E-Mail") }
				value={ value }
				autocomplete="email"
			/>
		</div>
		@ValidationMessages(errors)
	</div>
}

templ LfPasswordInput(errors []locales.LKMessage, value string, name string) {
	{{
		if name == "" {
			name = "password"
		}
	}}
	<div>
		<div class="uk-inline w-full">
			<span class="uk-form-icon">
				<uk-icon icon="lock"></uk-icon>
			</span>
			<input
				class="uk-input"
				type="password"
				name={ name }
				aria-label="Password Input"
				placeholder={ utils.T(ctx, locales.LKFormsPasswordTitle, "Password") }
				value={ value }
				autocomplete="current-password"
			/>
			<button
				type="button"
				class="uk-form-icon uk-form-icon-flip"
				style="cursor: pointer;"
				onclick="togglePasswordVisibility(this)"
			>
				<uk-icon icon="eye"></uk-icon>
			</button>
		</div>
		@ValidationMessages(errors)
	</div>
}

templ togglePasswordVisibility() {
	<script>
	function togglePasswordVisibility(button) {
		const container = button.closest('.uk-inline');
		const input = container.querySelector('input');
		const icon = button.querySelector('uk-icon');

		const isPasswordHidden = input.type === 'password';
		input.type = isPasswordHidden ? 'text' : 'password';
		icon.setAttribute('icon', isPasswordHidden ? 'eye-off' : 'eye');
	}
	</script>
}
