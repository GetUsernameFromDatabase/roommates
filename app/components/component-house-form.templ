package components

import (
	"fmt"
	"roommates/db/dbqueries"
	"roommates/globals"
	"roommates/locales"
	"roommates/models"
	"roommates/utils"
	"strconv"
	"strings"
)

templ HouseForm(model *models.House) {
	{{
		const url = globals.RHxHouseForm
		nameLabel := utils.T(ctx, locales.LKFormsHouseNameLabel, "House Name")

		var title string
		if model.HouseID != "" {
			title = utils.T(ctx, locales.LKFormsHouseTitle, "Modify house")
		} else {
			title = utils.T(ctx, locales.LKFormsHouseTitleNew, "Add new house")
		}

		nameErrors := model.ValidateName()
	}}
	<form id={ HfId } class="space-y-3">
		@HiddenInput("house_id", model.HouseID)
		@FormTitle(title)
		@InputWithLabel("text",
			"houseForm-name",
			"name",
			nameLabel,
			model.Name,
			LabelClass("uk-form-label uk-form-label-required"),
			ValidationMessages(nameErrors),
		)
		@houseRoommatesInput(model)
		<div class="mt-4" { FormSwapOuterHxAttributes(HfId)... }>
			if model.HouseID == "" {
				<button hx-post={ url } class="uk-btn uk-btn-primary block w-full">
					{ strings.ToUpper(utils.T(ctx, locales.LKFormsSubmit, "SUBMIT")) }
				</button>
			} else {
				<div class="flex justify-between">
					// TODO: test how id in hx-vals would be
					<button
						class="uk-btn uk-btn-destructive"
						hx-delete={ url + "?id=" + model.HouseID }
						hx-params="none"
					>
						{ strings.ToUpper(utils.T(ctx, locales.LKFormsDelete, "DELETE")) }
					</button>
					<button
						class="uk-btn uk-btn-primary"
						hx-put={ url }
					>
						{ strings.ToUpper(utils.T(ctx, locales.LKFormsUpdate, "UPDATE")) }
					</button>
				</div>
			}
		</div>
	</form>
}

templ houseRoommatesInput(model *models.House) {
	<div class="">
		<label class="uk-form-label" for="houseForm-roommates">
			{ utils.T(ctx, locales.LKFormsHouseAddUsers, "Add Roommates") }
		</label>
		<div class="uk-form-controls">
			// i do not like having to use delays -- wait Xms
			// but afterSettle and afterSwap do not work
			<input
				id={ HfRoomateInputId }
				name="searched_user"
				type="text"
				class="uk-input"
				hx-get={ globals.RHxRoomateSearch }
				hx-trigger="keyup changed delay:500ms"
				hx-target={ "#" + HfSearchResultsId }
				hx-swap="outerHTML"
				hx-sync="closest form:abort"
				hx-include="closest form"
				_={ "on blur call " + uiKitHRISR + ".hide()" }
			/>
			@HouseRoommatesInputSearchResults("", nil)
		</div>
		@HouseRoommatesInputData(model)
	</div>
}

templ HouseRoommatesInputData(model *models.House) {
	<div class="mt-2 flex flex-wrap">
		for i, value := range model.RoommateLabels {
			<div
				data-index={ i }
				class="m-1 cursor-pointer"
				_="on click remove me"
			>
				// this should be fiiiiine
				{{ key := model.RoommateKeys[i] }}
				@HiddenInput("roommates[]", key)
				@HiddenInput("roommates_labels[]", value)
				<div class="uk-tag-secondary uk-tag">
					<span>{ value }</span>
					<uk-icon icon="x"></uk-icon>
				</div>
			</div>
		}
	</div>
}

templ HouseRoommatesInputSearchResults(searchedUser string, foundUsers []dbqueries.UsersLikeExcludingExistingRow) {
	{{
		dropdownConfig := []string{
			"animation: uk-anmt-slide-top-sm",
			"pos: top-left",
			"stretch: x",
			"boundary-x: #" + HfRoomateInputId,
			"mode: click",
		}

		hyperscript := fmt.Sprintf(
			"on htmx:afterSettle if %s then call %[2]s.hide() else call %[2]s.show() end",
			strconv.FormatBool(searchedUser == ""),
			uiKitHRISR,
		)
	}}
	<div
		id={ HfSearchResultsId }
		class="uk-drop uk-dropdown min-w-52"
		data-uk-dropdown={ strings.Join(dropdownConfig, ";") }
		_={ hyperscript }
	>
		<ul class="uk-nav uk-dropdown-nav p-1">
			<li class="uk-text-meta">
				{ utils.T(ctx, locales.LKSearchResultsFor, "Search results for %s", strconv.Quote(searchedUser)) }
			</li>
			<li class="uk-nav-divider"></li>
			for _, user := range foundUsers {
				// expected use case up to 10 users
				{{
				hxVals := HxValsData(map[string]string{
					"user_id":    user.ID.String(),
					"user_label": user.Username},
				)
				}}
				<li
					role="button"
					data-key={ user.ID.String() }
					class="cursor-pointer hover:bg-secondary"
					hx-post={ globals.RHxRoomateSearch }
					hx-trigger="click"
					hx-target={ "#" + HfId }
					hx-swap="outerHTML"
					hx-sync="closest form:abort"
					hx-vals={ hxVals }
				>
					{ user.Username }
				</li>
			}
		</ul>
	</div>
}
