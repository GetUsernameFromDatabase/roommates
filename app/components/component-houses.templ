package components

import (
	"github.com/invopop/ctxi18n/i18n"
	"roommates/db/dbqueries"
	"roommates/globals"
	"roommates/locales"
	"roommates/middleware"
	"roommates/models"
	"roommates/utils"
)

templ houseAside(houses []dbqueries.UserHousesRow) {
	<aside class="max-md:hidden p-4 space-y-6">
		<div>
			<button
				class="uk-btn uk-btn-default w-full cursor-pointer"
				hx-get={ globals.RHxHouseForm }
				{ AtrHxSwapModal... }
			>
				{ utils.T(ctx, locales.LKFormsHouseTitleNew, "New House") }
			</button>
		</div>
		if len(houses) > 0 {
			<div>
				<h4 class="uk-h4">
					{ utils.T(ctx, locales.LKHousesYourHouses, "Your Houses") }
				</h4>
				<ul class="uk-list uk-list-disc mt-4">
					for _, house := range houses {
						<li>
							<a
								href={ globals.RHouses + "/" + house.ID.String() }
								class="uk-btn uk-btn-text"
							>
								{ house.Name }
							</a>
						</li>
					}
				</ul>
			</div>
		}
	</aside>
}

templ HouseModal(model *models.House) {
	@ModalWrap() {
		@HouseForm(model)
	}
}

templ HouseResidentBadge(residents []dbqueries.SelectHouseRoommatesRow) {
	<span class="uk-badge">
		{ utils.N(ctx, locales.LKHousesResidentCount, len(residents), i18n.M{"count": len(residents)}) }
	</span>
	<div
		class="uk-drop uk-dropdown min-w-52"
		data-uk-dropdown="animation: uk-anmt-slide-top-sm"
	>
		<ul class="uk-nav uk-dropdown-nav">
			for _, resident := range residents {
				{{ url := utils.ReplaceParam(globals.RUserID, "id", resident.ID.String()) }}
				<li>
					<a href={ url } { AtrHxPageSwap... }>
						{ resident.Username }
					</a>
				</li>
			}
		</ul>
	</div>
}

templ houseCard(house dbqueries.UserHousesRow) {
	{{ isMaker := middleware.GetAuthInfoReq(ctx).UserID.String() == house.MakerID.String() }}
	<div
		class="uk-card uk-card-body space-y-4"
	>
		<h3 class="uk-card-title">
			<a
				href={ globals.RHouses + "/" + house.ID.String() }
				{ AtrHxPageSwap... }
			>
				{ house.Name }
			</a>
		</h3>
		<div
			hx-get={ utils.ReplaceParam(globals.RHxHouseResidentsBadge, "id", house.ID.String()) }
			{ AtrHxReplaceMeOnRevealed... }
		></div>
		// <div class="uk-card-body"></div>
		<div class="uk-card-footer flex justify-center">
			if isMaker {
				<button
					class="uk-btn uk-btn-primary"
					hx-get={ globals.RHxHouseForm }
					hx-vals={ HxValsData(map[string]string{"house_id": house.ID.String()}) }
					{ AtrHxSwapModal... }
				>
					{ utils.T(ctx, locales.LKFormsEdit, "EDIT") }
				</button>
			}
		</div>
	</div>
}
